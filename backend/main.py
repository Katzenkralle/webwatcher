import uvicorn
from API.core import get_routes
from configurator import Config

from utility.custom_logging import CustomLogger
from utility import DEFAULT_LOGGER


from db_handler import MongoDbHandler, MariaDbHandler
from fastapi import FastAPI
from starlette.middleware.cors import CORSMiddleware



def establish_db_connections():
    # ToDo: Think about using connection pools
    # Setup everything
    return [MongoDbHandler(Config().mongo), MariaDbHandler(Config().maria)]


def create_app():
    [mongo, maria] = establish_db_connections()
    app = FastAPI(
        title="Webwatcher"
    )
    # ToDo: Edit for production
    # https://fastapi.tiangolo.com/tutorial/cors/#use-corsmiddleware
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    # /docs and /redoc are automatically generated by FastAPI
    app.include_router(get_routes())

    @app.middleware("http")
    async def db_connection_middleware(request, call_next):
        # Make db available for all routes under request.state
        request.state.mongo = mongo
        request.state.maria = maria
        response = await call_next(request)
        return response
    
    return app

if __name__ == "__main__":
    CustomLogger.set_default_log_opperation(level=Config().app.log_level, dev=Config().app.dev_mode)
    app = create_app()
    DEFAULT_LOGGER.info(f"Starting server at {Config().app.host}:{Config().app.port}")
    uvicorn.run(app, 
        host=Config().app.host,
        port=Config().app.port,
        log_level=Config().app.log_level,
        log_config=CustomLogger.get_uvicorn_logging_config())