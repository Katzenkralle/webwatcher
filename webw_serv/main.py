import uvicorn  # Unicorn
import asyncio
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
from contextlib import asynccontextmanager

from webw_serv import CONFIG
from webw_serv.main_establish_dbs import establish_db_connections, setup as setup_dbs
from webw_serv.utility.oven_cleaner import cleanup_folder
from webw_serv.API.core import get_routes
from webw_serv.configurator import Config
from webw_serv.watcher.manager import watch_runner_warper

from webw_serv.utility.custom_logging import CustomLogger
from webw_serv.utility import DEFAULT_LOGGER


from webw_serv.db_handler import MariaDbHandler
from fastapi import FastAPI
from starlette.middleware.cors import CORSMiddleware


def generate_scheduler():
    scheduler = BackgroundScheduler(
        executors={
            'default': {'type': 'threadpool', 'max_workers': 20}
        },
        job_defaults={
            'coalesce': False,
            'max_instances': 1
        },
        
    )
    return scheduler

async def load_cron_jobs(maria: MariaDbHandler, scheduler: BackgroundScheduler):
    # Load cron jobs from the database
    [jobs, _] = (await maria.get_all_job_info()).values()
    for job in jobs:
        if not job.enabled:
            continue
        script_name = job.script
        script_info = (await maria.get_script_info(script_name))[0]
        fs_path = script_info.fs_path
        id_ = job.id
        cron_time = job.execute_timer
        config = await maria.get_job_input_settings(job_id=id_)
        scheduler.add_job(
            func=watch_runner_warper,
            trigger=CronTrigger.from_crontab(cron_time),
            args=(),
            kwargs={"config": config, "fs_path": fs_path, "script_name": script_name, "job_id": id_},
            id=str(id_),
            name=job.name,
            replace_existing=True
        )

async def create_app():
    [mongo, maria] = establish_db_connections()
    await setup_dbs(maria, mongo)
    scheduler = generate_scheduler()
    await load_cron_jobs(maria, scheduler)

    @asynccontextmanager
    async def lifespan(app: FastAPI):
        yield
        # executed when the app is shutting down
        scheduler.shutdown()
        mongo.close()
        maria.close()

    app = FastAPI(
        title="Webwatcher",
        lifespan=lifespan
    )

    # ToDo: Edit for production
    # https://fastapi.tiangolo.com/tutorial/cors/#use-corsmiddleware
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    # /docs and /redoc are automatically generated by FastAPI
    app.include_router(get_routes())

    @app.middleware("http")
    async def db_connection_middleware(request, call_next):
        # Make db available for all routes under request.state
        request.state.mongo = mongo
        request.state.maria = maria
        request.state.scheduler = scheduler

        response = await call_next(request)
        return response

    scheduler.start()
    return app

def self_cleanup_cycle():
    cleanup_folder(CONFIG.SCRIPTS_TEMP_PATH)


async def main():
    CustomLogger.set_default_log_opperation(level=Config().app.log_level, dev=Config().app.dev_mode)
    self_cleanup_cycle()
    app = await create_app()
    DEFAULT_LOGGER.info(f"Starting server at {Config().app.host}:{Config().app.port}")
    connfig = uvicorn.Config(app,
                host=Config().app.host,
                port=Config().app.port,
                lifespan="on",
                log_level=Config().app.log_level,
                log_config=CustomLogger.get_uvicorn_logging_config())
    server = uvicorn.Server(config=connfig)
    await server.serve()


if __name__ == "__main__":
    asyncio.run(main())