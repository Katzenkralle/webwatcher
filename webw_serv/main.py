import uvicorn
from apscheduler.schedulers.background import BackgroundScheduler
from contextlib import asynccontextmanager

from webw_serv.API.core import get_routes
from webw_serv.configurator import Config

from webw_serv.utility.custom_logging import CustomLogger
from webw_serv.utility import DEFAULT_LOGGER


from webw_serv.db_handler import MongoDbHandler, MariaDbHandler
from fastapi import FastAPI
from starlette.middleware.cors import CORSMiddleware



def establish_db_connections():
    # ToDo: Think about using connection pools
    # Setup everything
    return [MongoDbHandler(Config().mongo),
            MariaDbHandler(Config().maria, Config().app)]

def generate_scheduler():
    scheduler = BackgroundScheduler(
        executors={
            'default': {'type': 'threadpool', 'max_workers': 20}
        },
        job_defaults={
            'coalesce': False,
            'max_instances': 3
        }
    )
    return scheduler


def create_app():
    [mongo, maria] = establish_db_connections()
    scheduler = generate_scheduler()


    @asynccontextmanager
    async def lifespan(app: FastAPI):
        yield
        # executed when the app is shutting down
        scheduler.shutdown()
        mongo.close()
        maria.close()

    app = FastAPI(
        title="Webwatcher",
        lifespan=lifespan
    )

    # ToDo: Edit for production
    # https://fastapi.tiangolo.com/tutorial/cors/#use-corsmiddleware
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    # /docs and /redoc are automatically generated by FastAPI
    app.include_router(get_routes())

    @app.middleware("http")
    async def db_connection_middleware(request, call_next):
        # Make db available for all routes under request.state
        request.state.mongo = mongo
        request.state.maria = maria
        request.state.scheduler = scheduler

        response = await call_next(request)
        return response
    scheduler.start()
    return app

def main():
    CustomLogger.set_default_log_opperation(level=Config().app.log_level, dev=Config().app.dev_mode)
    app = create_app()
    DEFAULT_LOGGER.info(f"Starting server at {Config().app.host}:{Config().app.port}")
    uvicorn.run(app,
                host=Config().app.host,
                port=Config().app.port,
                lifespan="on",
                log_level=Config().app.log_level,
                log_config=CustomLogger.get_uvicorn_logging_config())


if __name__ == "__main__":
    main()